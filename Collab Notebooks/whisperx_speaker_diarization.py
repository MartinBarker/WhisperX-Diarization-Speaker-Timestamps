# -*- coding: utf-8 -*-
"""WhisperX_Speaker_Diarization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IHum-j2AOjVOs_ZoqJ5yBUjf1kI4SLmt

    pip install --q git+https://github.com/m-bain/whisperx.git

Run with:
    python3 Collab\ Notebooks/whisperx_speaker_diarization.py > output/output.log 
"""
import whisperx
import gc
from dotenv import load_dotenv
import os
import json
import time

# Load environment variables from .env file
load_dotenv()

# Get Hugging Face token from environment variable
huggingface_token = os.getenv("HUGGINGFACE_TOKEN")

device = "cuda"
batch_size = 4 # reduce if low on GPU mem
compute_type = "int8" # change from "float16" to "int8" if low on GPU mem (may reduce accuracy)

audio_file = "audio/short_MEGA64_PODCAST_483.mp3"

audio = whisperx.load_audio(audio_file)

model = whisperx.load_model("large-v2", device, compute_type=compute_type)

result = model.transcribe(audio, batch_size=batch_size)
print(result["segments"]) # before alignment

# delete model if low on GPU resources
# import gc; gc.collect(); torch.cuda.empty_cache(); del model

# 2. Align whisper output
model_a, metadata = whisperx.load_align_model(language_code=result["language"], device=device)
result = whisperx.align(result["segments"], model_a, metadata, audio, device, return_char_alignments=False)

result

diarize_model = whisperx.DiarizationPipeline(use_auth_token=huggingface_token,
                                             device=device)

diarize_segments = diarize_model(audio, min_speakers=1, max_speakers=8)

diarize_segments

diarize_segments.speaker.unique()

result = whisperx.assign_word_speakers(diarize_segments, result)
print(diarize_segments)
# print(result["segments"]) # segments are now assigned speaker IDs

# Save the result to a JSON file with a unique filename
timestamp = int(time.time() * 1000)
audio_filename = os.path.basename(audio_file).split('.')[0]
output_filename = f"speaker_timestamps_{audio_filename}_{timestamp}.json"

with open(output_filename, 'w') as f:
    json.dump(result, f)

print(f"Results saved to {output_filename}")